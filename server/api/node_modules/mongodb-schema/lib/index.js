"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.schemaStats = exports.SchemaAnalyzer = exports.getSchemaPaths = exports.stream = void 0;
const stream_1 = require("stream");
const promises_1 = require("stream/promises");
const stream_2 = __importDefault(require("./stream"));
exports.stream = stream_2.default;
const schema_analyzer_1 = require("./schema-analyzer");
Object.defineProperty(exports, "SchemaAnalyzer", { enumerable: true, get: function () { return schema_analyzer_1.SchemaAnalyzer; } });
const schemaStats = __importStar(require("./stats"));
exports.schemaStats = schemaStats;
function getStreamSource(source) {
    let streamSource;
    if ('stream' in source) {
        streamSource = source.stream();
    }
    else if ('pipe' in source) {
        streamSource = source;
    }
    else if (Array.isArray(source)) {
        streamSource = stream_1.Readable.from(source);
    }
    else {
        throw new Error('Unknown input type for `docs`. Must be an array, ' +
            'stream or MongoDB Cursor.');
    }
    return streamSource;
}
async function parseSchema(source, options) {
    if (typeof options === 'undefined') {
        options = {};
    }
    const streamSource = getStreamSource(source);
    const dest = new stream_1.PassThrough({ objectMode: true });
    await (0, promises_1.pipeline)(streamSource, (0, stream_2.default)(options), dest);
    for await (const result of dest) {
        return result;
    }
    throw new Error('unreachable');
}
async function getSchemaPaths(source) {
    const streamSource = getStreamSource(source);
    const dest = new stream_1.PassThrough({ objectMode: true });
    await (0, promises_1.pipeline)(streamSource, (0, stream_2.default)({
        schemaPaths: true
    }), dest);
    for await (const result of dest) {
        return result;
    }
    throw new Error('unreachable');
}
exports.getSchemaPaths = getSchemaPaths;
exports.default = parseSchema;
//# sourceMappingURL=index.js.map